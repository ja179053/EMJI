@using EMJI.Models
@using EMJI.Models.Sortable
<div class="table-status">
    <h3>@ListStatus (@Tables.Count())</h3>
    <ul 
        class="dropzone @dropClass"
        ondragover="event.preventDefault();"
        ondragstart="event.dataTransfer.setData('', event.target.id);"
        ondrop="HandleDrop"
        ondragenter="HandleDragEnter"
        ondragleave="HandleDragLeave">
        @foreach (var Table in Tables){
            
            <TableDraggable Table="Table" />
        }
    </ul>
</div>
@code {
    [CascadingParameter] TablesContainer Container {
        get;
        set;
    }
    [Parameter]
    public TableStatus ListStatus
    {
        get;
        set;
    }
    [Parameter] public TableStatus[] AllowedStatuses {
        get;
        set;
    }
    List<Table> Tables = new List<Table>();
    string dropClass = "";
    protected override void OnParametersSet() {
        Tables.Clear();
        Tables.AddRange(Container.Tables.Where(x => x.Status == ListStatus));
    }
    private void HandleDragEnter() {
        if (ListStatus == Container.Payload.Status) return;
        if (AllowedStatuses != null && !AllowedStatuses.Contains(Container.Payload.Status))
        {
            dropClass = "no-drop";
        } else {
            dropClass = "can-drop";
        }
    }
    private void HandleDragLeave() {
        dropClass = "";
    }
    private async Task HandleDrop() {
        dropClass = "";
        if (AllowedStatuses != null && !AllowedStatuses.Contains(Container.Payload.Status)) return;
        await Container.UpdateTableAsync(ListStatus);
    }
}